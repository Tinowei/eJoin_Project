// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(EJoinContext))]
    [Migration("20240315140634_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("活動地點的詳細地址");

                    b.Property<string>("AddressDetail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("活動地點的補充說明，可空值");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("活動地點的城市");

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動封面圖(單張)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("活動建立時間，不可變更");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasComment("活動結束時間");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動簡介");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime")
                        .HasComment("最後編輯時間，可空值");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("地址對應的緯度");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("地址對應的經度");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("活動建立者，關聯Members");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasComment("活動開始時間");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasComment("活動狀態：1.草稿，2.上架，3.結束，4.下架");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動摘要");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("活動標題");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            AddressDetail = "Floor 5",
                            City = "Taipei",
                            CoverUrl = "https://example.com/cover1.jpg",
                            CreateTime = new DateTime(2024, 3, 15, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6149),
                            EndTime = new DateTime(2024, 4, 17, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6139),
                            Introduction = "Join us for a day of learning and networking.",
                            Latitude = "25.0329",
                            Longitude = "121.5654",
                            MemberId = 1,
                            StartTime = new DateTime(2024, 4, 15, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6132),
                            Status = (byte)2,
                            Summary = "A tech conference for developers.",
                            Title = "Tech Conference"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Main St",
                            AddressDetail = "Ground Floor",
                            City = "Taichung",
                            CoverUrl = "https://example.com/cover2.jpg",
                            CreateTime = new DateTime(2024, 3, 15, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6155),
                            EndTime = new DateTime(2024, 5, 18, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6153),
                            Introduction = "Experience the best of local music.",
                            Latitude = "24.1754",
                            Longitude = "120.6899",
                            MemberId = 2,
                            StartTime = new DateTime(2024, 5, 15, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6152),
                            Status = (byte)2,
                            Summary = "A music festival featuring local bands.",
                            Title = "Music Festival"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.EventTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("活動Id，關聯Events");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int")
                        .HasComment("主題Id，關聯Themes");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ThemeId");

                    b.ToTable("EventThemes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            ThemeId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 2,
                            ThemeId = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Follow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeingFollowedId")
                        .HasColumnType("int")
                        .HasComment("被跟隨者，關聯Members");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasComment("跟隨者，關聯Members");

                    b.HasKey("Id");

                    b.HasIndex("BeingFollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Follows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeingFollowedId = 2,
                            FollowerId = 1
                        },
                        new
                        {
                            Id = 2,
                            BeingFollowedId = 1,
                            FollowerId = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("被喜歡的活動，關聯Events");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員，關聯Members");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            MemberId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 1,
                            MemberId = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("詳細地址，可空值");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("大頭照網址，可空值");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasComment("生日，可空值");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("城市，可空值");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("封面圖片網址，可空值");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("個人簡介，可空值");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("顯示名稱，可空值");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasComment("驗證與登入用信箱，不可變更");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint")
                        .HasComment("性別，可空值");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasComment("是否刪除");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime")
                        .HasComment("最後編輯時間，可空值");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("帳號用姓名");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("雜湊後的密碼");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("電話");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime")
                        .HasComment("註冊時間，不可變更");

                    b.Property<byte?>("Relationship")
                        .HasColumnType("tinyint")
                        .HasComment("感情狀態，可空值");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            AvatarUrl = "https://example.com/avatar1.jpg",
                            Birthday = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Taipei",
                            CoverUrl = "https://example.com/cover1.jpg",
                            Description = "Software Developer",
                            DisplayName = "John",
                            Email = "john.doe@example.com",
                            Gender = (byte)1,
                            IsDelete = false,
                            Name = "John Doe",
                            Password = "hashedPassword",
                            Phone = "1234567890",
                            RegisterTime = new DateTime(2024, 3, 15, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(5918),
                            Relationship = (byte)2
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Main St",
                            AvatarUrl = "https://example.com/avatar2.jpg",
                            Birthday = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Taichung",
                            CoverUrl = "https://example.com/cover2.jpg",
                            Description = "Graphic Designer",
                            DisplayName = "Jane",
                            Email = "jane.doe@example.com",
                            Gender = (byte)2,
                            IsDelete = false,
                            Name = "Jane Doe",
                            Password = "hashedPassword2",
                            Phone = "0987654321",
                            RegisterTime = new DateTime(2024, 3, 15, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(5933),
                            Relationship = (byte)1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("主題圖片位址，應在本地端");

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("主題名稱");

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconUrl = "music_icon.png",
                            ThemeName = "課程"
                        },
                        new
                        {
                            Id = 2,
                            IconUrl = "sports_icon.png",
                            ThemeName = "公益"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("建立時間，不可變更");

                    b.Property<DateTime>("EndSellTime")
                        .HasColumnType("datetime")
                        .HasComment("結束販售時間");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("所屬活動Id，關聯Events");

                    b.Property<int?>("MaxPurchase")
                        .HasColumnType("int")
                        .HasComment("單次最大購買數量，可空值，代表無限制");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("票種名稱");

                    b.Property<int>("ReleaseAmount")
                        .HasColumnType("int")
                        .HasComment("釋出總數");

                    b.Property<DateTime>("StartSellTime")
                        .HasColumnType("datetime")
                        .HasComment("開始販售時間");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasComment("庫存");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasComment("單價");

                    b.HasKey("Id")
                        .HasName("PK_TicketType");

                    b.HasIndex("EventId");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2024, 3, 15, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6199),
                            EndSellTime = new DateTime(2024, 4, 14, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6207),
                            EventId = 1,
                            MaxPurchase = 5,
                            Name = "General Admission",
                            ReleaseAmount = 100,
                            StartSellTime = new DateTime(2024, 3, 16, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6205),
                            Stock = 100,
                            UnitPrice = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2024, 3, 15, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6209),
                            EndSellTime = new DateTime(2024, 4, 14, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6211),
                            EventId = 1,
                            MaxPurchase = 2,
                            Name = "VIP",
                            ReleaseAmount = 50,
                            StartSellTime = new DateTime(2024, 3, 16, 22, 6, 33, 951, DateTimeKind.Local).AddTicks(6210),
                            Stock = 50,
                            UnitPrice = 100.00m
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Event", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("Events")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_Members");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EventTheme", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("EventThemes")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventThemes_Events");

                    b.HasOne("ApplicationCore.Entities.Theme", "Theme")
                        .WithMany("EventThemes")
                        .HasForeignKey("ThemeId")
                        .IsRequired()
                        .HasConstraintName("FK_EventThemes_Themes");

                    b.Navigation("Event");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Follow", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "BeingFollowed")
                        .WithMany("FollowBeingFolloweds")
                        .HasForeignKey("BeingFollowedId")
                        .IsRequired()
                        .HasConstraintName("FK_Follows_Members1");

                    b.HasOne("ApplicationCore.Entities.Member", "Follower")
                        .WithMany("FollowFollowers")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Follows_Members");

                    b.Navigation("BeingFollowed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Like", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("Likes")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Likes_Events");

                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("Likes")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Likes_Members");

                    b.Navigation("Event");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TicketType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypes_Events");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Event", b =>
                {
                    b.Navigation("EventThemes");

                    b.Navigation("Likes");

                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Member", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("FollowBeingFolloweds");

                    b.Navigation("FollowFollowers");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Theme", b =>
                {
                    b.Navigation("EventThemes");
                });
#pragma warning restore 612, 618
        }
    }
}
