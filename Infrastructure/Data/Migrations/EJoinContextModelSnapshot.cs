// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(EJoinContext))]
    partial class EJoinContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("購物車建立時間");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("購物車對應活動，關聯Events");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime")
                        .HasComment("購物車到期時間");

                    b.Property<string>("LearnedFrom")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動資訊來源");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("購物車所屬會員，關聯Members");

                    b.Property<string>("ParticipantEmail")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasComment("參加人Email");

                    b.Property<string>("ParticipantName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("參加人姓名");

                    b.Property<string>("ParticipantPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("參加人電話");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EventId" }, "IX_Carts_EventId");

                    b.HasIndex(new[] { "MemberId" }, "IX_Carts_MemberId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CartTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasComment("票券所屬購物車，關聯Carts");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("選取的票券數量");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int")
                        .HasComment("票券所屬票種，關聯TicketTypes");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CartId" }, "IX_CartTickets_CartId");

                    b.HasIndex(new[] { "TicketTypeId" }, "IX_CartTickets_TicketTypeId");

                    b.ToTable("CartTickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EcpayLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CheckMacValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("傳送給綠界，檢查碼");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("傳送給綠界，商品名稱");

                    b.Property<DateTime>("MerchantTradeDate")
                        .HasColumnType("datetime")
                        .HasComment("傳送給綠界，特店交易時間");

                    b.Property<string>("MerchantTradeNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("傳送給綠界，特店交易編號");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasComment("綠界回傳值，付款時間");

                    b.Property<int>("RelateOrderId")
                        .HasColumnType("int")
                        .HasComment("對應到的OrderId");

                    b.Property<int?>("RtnCode")
                        .HasColumnType("int")
                        .HasComment("綠界回傳值，交易狀態");

                    b.Property<string>("RtnMsg")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("綠界回傳值，交易訊息");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int")
                        .HasComment("傳送給綠界，交易金額");

                    b.Property<DateTime?>("TradeDate")
                        .HasColumnType("datetime")
                        .HasComment("綠界回傳值，訂單成立時間");

                    b.Property<string>("TradeNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("綠界回傳值，綠界交易編號");

                    b.HasKey("Id");

                    b.ToTable("ECPayLog", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("活動地點的詳細地址");

                    b.Property<string>("AddressDetail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("活動地點的補充說明，可空值");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("活動地點的城市");

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動封面圖(單張)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("活動建立時間，不可變更");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasComment("活動結束時間");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動簡介");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime")
                        .HasComment("最後編輯時間，可空值");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("地址對應的緯度");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("地址對應的經度");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("活動建立者，關聯Members");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasComment("活動開始時間");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasComment("活動狀態：1.草稿，2.上架，3.結束，4.下架");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動摘要");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("活動標題");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "IX_Events_MemberId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            AddressDetail = "Floor 5",
                            City = "Taipei",
                            CoverUrl = "https://example.com/cover1.jpg",
                            CreateTime = new DateTime(2024, 4, 1, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3232),
                            EndTime = new DateTime(2024, 5, 3, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3216),
                            Introduction = "Join us for a day of learning and networking.",
                            Latitude = "25.0329",
                            Longitude = "121.5654",
                            MemberId = 1,
                            StartTime = new DateTime(2024, 5, 1, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3208),
                            Status = (byte)2,
                            Summary = "A tech conference for developers.",
                            Title = "Tech Conference"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Main St",
                            AddressDetail = "Ground Floor",
                            City = "Taichung",
                            CoverUrl = "https://example.com/cover2.jpg",
                            CreateTime = new DateTime(2024, 4, 1, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3237),
                            EndTime = new DateTime(2024, 6, 4, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3235),
                            Introduction = "Experience the best of local music.",
                            Latitude = "24.1754",
                            Longitude = "120.6899",
                            MemberId = 2,
                            StartTime = new DateTime(2024, 6, 1, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3235),
                            Status = (byte)2,
                            Summary = "A music festival featuring local bands.",
                            Title = "Music Festival"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.EventTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("活動Id，關聯Events");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int")
                        .HasComment("主題Id，關聯Themes");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EventId" }, "IX_EventThemes_EventId");

                    b.HasIndex(new[] { "ThemeId" }, "IX_EventThemes_ThemeId");

                    b.ToTable("EventThemes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            ThemeId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 2,
                            ThemeId = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Follow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeingFollowedId")
                        .HasColumnType("int")
                        .HasComment("被跟隨者，關聯Members");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasComment("跟隨者，關聯Members");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BeingFollowedId" }, "IX_Follows_BeingFollowedId");

                    b.HasIndex(new[] { "FollowerId" }, "IX_Follows_FollowerId");

                    b.ToTable("Follows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeingFollowedId = 2,
                            FollowerId = 1
                        },
                        new
                        {
                            Id = 2,
                            BeingFollowedId = 1,
                            FollowerId = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.GoogleLoginInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("建立時間");

                    b.Property<string>("Gamil")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasComment("Google回傳Gmail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Google回傳Name");

                    b.Property<string>("NameIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Google回傳NameIdentifier欄位");

                    b.HasKey("Id");

                    b.ToTable("GoogleLoginInfo", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.GoogleMemberRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoogleLoginInfoId")
                        .HasColumnType("int")
                        .HasComment("Google紀錄表Id，關聯GoogleLoginInfo");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id，關連Members");

                    b.HasKey("Id");

                    b.HasIndex("GoogleLoginInfoId");

                    b.HasIndex("MemberId");

                    b.ToTable("GoogleMemberRelation", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("被喜歡的活動，關聯Events");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員，關聯Members");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EventId" }, "IX_Likes_EventId");

                    b.HasIndex(new[] { "MemberId" }, "IX_Likes_MemberId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            MemberId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 1,
                            MemberId = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("詳細地址，可空值");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("大頭照網址，可空值");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasComment("生日，可空值");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("城市，可空值");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("封面圖片網址，可空值");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("個人簡介，可空值");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("顯示名稱，可空值");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasComment("驗證與登入用信箱，不可變更");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint")
                        .HasComment("性別，可空值");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasComment("是否刪除");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime")
                        .HasComment("最後編輯時間，可空值");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("帳號用姓名");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("雜湊後的密碼");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("電話");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime")
                        .HasComment("註冊時間，不可變更");

                    b.Property<byte?>("Relationship")
                        .HasColumnType("tinyint")
                        .HasComment("感情狀態，可空值");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            AvatarUrl = "https://example.com/avatar1.jpg",
                            Birthday = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Taipei",
                            CoverUrl = "https://example.com/cover1.jpg",
                            Description = "Software Developer",
                            DisplayName = "John",
                            Email = "john.doe@example.com",
                            Gender = (byte)1,
                            IsDelete = false,
                            Name = "John Doe",
                            Password = "hashedPassword",
                            Phone = "1234567890",
                            RegisterTime = new DateTime(2024, 4, 1, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(2759),
                            Relationship = (byte)2
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Main St",
                            AvatarUrl = "https://example.com/avatar2.jpg",
                            Birthday = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Taichung",
                            CoverUrl = "https://example.com/cover2.jpg",
                            Description = "Graphic Designer",
                            DisplayName = "Jane",
                            Email = "jane.doe@example.com",
                            Gender = (byte)2,
                            IsDelete = false,
                            Name = "Jane Doe",
                            Password = "hashedPassword2",
                            Phone = "0987654321",
                            RegisterTime = new DateTime(2024, 4, 1, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(2780),
                            Relationship = (byte)1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasComment("買家Id，關聯Members");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("活動Id，關聯Events");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime")
                        .HasComment("待付款的到期時間");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("訂單編號");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasComment("訂單狀態，1為待付款，2為已付款");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BuyerId" }, "IX_Orders_BuyerId");

                    b.HasIndex(new[] { "EventId" }, "IX_Orders_EventId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("買家名稱");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("訂單建立時間");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("活動標題");

                    b.Property<string>("LearnedFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動資訊來源");

                    b.Property<string>("ParticipantEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasComment("參加人Email");

                    b.Property<string>("ParticipantName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("參加人姓名");

                    b.Property<string>("ParticipantPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("參加人電話");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("money")
                        .HasComment("總價格");

                    b.HasKey("Id");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasComment("所屬的明細Id，關聯OrderDetials");

                    b.Property<int>("PurchaseQuantity")
                        .HasColumnType("int")
                        .HasComment("購入數量");

                    b.Property<int?>("TicketTypeId")
                        .HasColumnType("int")
                        .HasComment("原票種的Id");

                    b.Property<string>("TicketTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("票種名稱");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasComment("單價");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderDetailId" }, "IX_OrderTickets_OrderDetailId");

                    b.ToTable("OrderTickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ReleaseTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ChangedTime")
                        .HasColumnType("datetime")
                        .HasComment("異動時間，可空值");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("票券所屬活動，關聯Events");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime")
                        .HasComment("到期時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("票券持有者，關聯Members");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("票券所屬訂單，關聯Orders");

                    b.Property<string>("ParticipanPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("參加人電話");

                    b.Property<string>("ParticipantEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasComment("參加人Email");

                    b.Property<string>("ParticipantName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("參加人姓名");

                    b.Property<string>("ReleaseTicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("票券編號");

                    b.Property<string>("Staff")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("核銷人員");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasComment("票券異動狀態，");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int")
                        .HasComment("票券所屬種類，關聯TicketTypes");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrderId");

                    b.ToTable("ReleaseTickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("主題圖片位址，應在本地端");

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("主題名稱");

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconUrl = "music_icon.png",
                            ThemeName = "課程"
                        },
                        new
                        {
                            Id = 2,
                            IconUrl = "sports_icon.png",
                            ThemeName = "公益"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("自動生成Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("建立時間，不可變更");

                    b.Property<DateTime>("EndSellTime")
                        .HasColumnType("datetime")
                        .HasComment("結束販售時間");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("所屬活動Id，關聯Events");

                    b.Property<int?>("MaxPurchase")
                        .HasColumnType("int")
                        .HasComment("單次最大購買數量，可空值，代表無限制");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("票種名稱");

                    b.Property<int>("ReleaseAmount")
                        .HasColumnType("int")
                        .HasComment("釋出總數");

                    b.Property<DateTime>("StartSellTime")
                        .HasColumnType("datetime")
                        .HasComment("開始販售時間");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasComment("庫存");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasComment("單價");

                    b.HasKey("Id")
                        .HasName("PK_TicketType");

                    b.HasIndex(new[] { "EventId" }, "IX_TicketTypes_EventId");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2024, 4, 1, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3283),
                            EndSellTime = new DateTime(2024, 5, 1, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3288),
                            EventId = 1,
                            MaxPurchase = 5,
                            Name = "General Admission",
                            ReleaseAmount = 100,
                            StartSellTime = new DateTime(2024, 4, 2, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3287),
                            Stock = 100,
                            UnitPrice = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2024, 4, 1, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3291),
                            EndSellTime = new DateTime(2024, 5, 1, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3293),
                            EventId = 1,
                            MaxPurchase = 2,
                            Name = "VIP",
                            ReleaseAmount = 50,
                            StartSellTime = new DateTime(2024, 4, 2, 17, 43, 29, 899, DateTimeKind.Local).AddTicks(3293),
                            Stock = 50,
                            UnitPrice = 100.00m
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Cart", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("Carts")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Carts_Events");

                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("Carts")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Carts_Members");

                    b.Navigation("Event");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CartTicket", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Cart", "Cart")
                        .WithMany("CartTickets")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_CartTickets_Carts");

                    b.HasOne("ApplicationCore.Entities.TicketType", "TicketType")
                        .WithMany("CartTickets")
                        .HasForeignKey("TicketTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CartTickets_TicketTypes1");

                    b.Navigation("Cart");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Event", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("Events")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_Members");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EventTheme", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("EventThemes")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventThemes_Events");

                    b.HasOne("ApplicationCore.Entities.Theme", "Theme")
                        .WithMany("EventThemes")
                        .HasForeignKey("ThemeId")
                        .IsRequired()
                        .HasConstraintName("FK_EventThemes_Themes");

                    b.Navigation("Event");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Follow", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "BeingFollowed")
                        .WithMany("FollowBeingFolloweds")
                        .HasForeignKey("BeingFollowedId")
                        .IsRequired()
                        .HasConstraintName("FK_Follows_Members1");

                    b.HasOne("ApplicationCore.Entities.Member", "Follower")
                        .WithMany("FollowFollowers")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Follows_Members");

                    b.Navigation("BeingFollowed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("ApplicationCore.Entities.GoogleMemberRelation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.GoogleLoginInfo", "GoogleLoginInfo")
                        .WithMany("GoogleMemberRelations")
                        .HasForeignKey("GoogleLoginInfoId")
                        .IsRequired()
                        .HasConstraintName("FK_GoogleMemberRelation_GoogleLoginInfo");

                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("GoogleMemberRelations")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_GoogleMemberRelation_Members");

                    b.Navigation("GoogleLoginInfo");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Like", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("Likes")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Likes_Events");

                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("Likes")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Likes_Members");

                    b.Navigation("Event");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Members");

                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("Orders")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Events");

                    b.Navigation("Buyer");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Order", "IdNavigation")
                        .WithOne("OrderDetail")
                        .HasForeignKey("ApplicationCore.Entities.OrderDetail", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Orders");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderTicket", b =>
                {
                    b.HasOne("ApplicationCore.Entities.OrderDetail", "OrderDetail")
                        .WithMany("OrderTickets")
                        .HasForeignKey("OrderDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderTickets_OrderDetails");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ReleaseTicket", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("ReleaseTickets")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_ReleaseTickets_Events");

                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("ReleaseTickets")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_ReleaseTickets_Members");

                    b.HasOne("ApplicationCore.Entities.Order", "Order")
                        .WithMany("ReleaseTickets")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_ReleaseTickets_Orders");

                    b.Navigation("Event");

                    b.Navigation("Member");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TicketType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Event", "Event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypes_Events");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Cart", b =>
                {
                    b.Navigation("CartTickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Event", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("EventThemes");

                    b.Navigation("Likes");

                    b.Navigation("Orders");

                    b.Navigation("ReleaseTickets");

                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.GoogleLoginInfo", b =>
                {
                    b.Navigation("GoogleMemberRelations");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Member", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Events");

                    b.Navigation("FollowBeingFolloweds");

                    b.Navigation("FollowFollowers");

                    b.Navigation("GoogleMemberRelations");

                    b.Navigation("Likes");

                    b.Navigation("Orders");

                    b.Navigation("ReleaseTickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.Navigation("OrderDetail");

                    b.Navigation("ReleaseTickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderDetail", b =>
                {
                    b.Navigation("OrderTickets");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Theme", b =>
                {
                    b.Navigation("EventThemes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TicketType", b =>
                {
                    b.Navigation("CartTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
